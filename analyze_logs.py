# analyze_logs.py
import json
import os
from collections import Counter
from datetime import datetime

LOG_FOLDER = "logs"

# ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
positive_keywords = ["‡∏î‡∏µ", "‡∏ä‡∏≠‡∏ö", "‡∏™‡∏ô‡∏∏‡∏Å", "‡∏û‡∏≠‡πÉ‡∏à", "‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á", "‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô", "‡∏™‡∏á‡∏ö", "‡∏£‡∏±‡∏Å"]
negative_keywords = ["‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î", "‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢", "‡∏Å‡∏î‡∏î‡∏±‡∏ô", "‡πÄ‡∏ö‡∏∑‡πà‡∏≠", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏£‡∏á", "‡πÇ‡∏Å‡∏£‡∏ò", "‡πÄ‡∏®‡∏£‡πâ‡∏≤", "‡∏™‡∏±‡∏ö‡∏™‡∏ô"]

def load_all_conversations():
    data = []
    for file in os.listdir(LOG_FOLDER):
        if file.endswith(".json"):
            path = os.path.join(LOG_FOLDER, file)
            with open(path, "r", encoding="utf-8") as f:
                try:
                    log = json.load(f)
                    if "conversation" in log:
                        data.extend(log["conversation"])
                except Exception as e:
                    print(f"‚ùå ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå {file} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
    return data

def analyze_behavior(conversations):
    total = len(conversations)
    if total == 0:
        print("‚ùó ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô logs/")
        return

    word_counter = Counter()
    pos_count = 0
    neg_count = 0
    neutral_count = 0
    total_words = 0
    longest_answer = ""
    timestamps = []

    for entry in conversations:
        answer = entry["user_answer"]
        words = answer.split()
        word_counter.update(words)
        total_words += len(words)
        timestamps.append(entry["timestamp"])

        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
        lowered = answer.lower()
        if any(word in lowered for word in positive_keywords):
            pos_count += 1
        elif any(word in lowered for word in negative_keywords):
            neg_count += 1
        else:
            neutral_count += 1

        if len(answer) > len(longest_answer):
            longest_answer = answer

    avg_length = total_words / total if total else 0
    common_words = word_counter.most_common(10)

    print(f"\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏à‡∏≤‡∏Å {total} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ({len(set(timestamps))} session):\n")
    print(f"- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: {avg_length:.2f} ‡∏Ñ‡∏≥")
    print(f"- ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: {[w for w, _ in common_words]}")
    print(f"- ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö:")
    print(f"    ‚Ä¢ ‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å: {pos_count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    print(f"    ‚Ä¢ ‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏ö: {neg_count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    print(f"    ‚Ä¢ ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á: {neutral_count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    print(f"- ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:\n  \"{longest_answer}\"")

if __name__ == "__main__":
    print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå conversation logs...")
    all_data = load_all_conversations()
    analyze_behavior(all_data)
